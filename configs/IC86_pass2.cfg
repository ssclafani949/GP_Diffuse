# The default 'detector config' for the diffuse-numu northern tracks analysis.

[IC86_pass2]
# Lookup-key list:
name = IC86_pass2
systematics = ${name}_systematics
alignment = ${name}_alignment
dom_eff = ${name}_dom_eff
ice_scat = ${name}_ice_scat
ice_abs = ${name}_ice_abs
ice_hole = ${name}_ice_hole
var_mapping = ${name}_var_mapping
var_mapping_mc = ${name}_var_mapping_mc
analysis_binning = ${name}_2D_binning
# Data and MC paths:
data = None
datasets_path = ${main:dir_datasets}
baseline_dataset = ${datasets_path}/baseline
# Livetime during which the data was taken
livetime = 257989333.37

# --- Binning and Oversampling Settings ---

# Default 2D-binning settings
[IC86_pass2_2D_binning]
class_name = Binning_2D
# binning_range: (start, stop, number of bin-edges, spacing)
# start, stop are in the configured spacing
binning_range = [(2,7,51,log), (-1, 0.0872, 34,cos)]
# variables to use for the analysis histogram (two for 2D binning)
analysis_variables = reco_energy, reco_zenith

# Example 3D-binning settings.
[IC86_pass2_3D_binning]
class_name = Binning_3D
binning_range = [(2,7,51,log), (-1, 0.0872, 34,cos), (0, 6.28319, 181,lin)]
analysis_variables = reco_energy, reco_zenith, reco_ra
oversampling = galactic_oversampling

# Example binning using the Binning 2D_to_3D class which bins non 3D components in 2D
[IC86_pass2_2D_to_3D_binning]
class_name = Binning_2D_to_3D
binning_range = [(2,7,51,log), (-1, 0.0872, 34,cos), (0, 6.28319, 181,lin)]
analysis_variables = reco_energy, reco_zenith, reco_ra

# Example oversampling settings (right ascension oversampling)
[galactic_oversampling]
# type: the oversampling type, one of ['per_bin', 'full_range'].
# per_bin: randomly scrambles the entire baseline set in each RA-bin 
# full_range: copies the entire baseline set n times and randomly scrambles
#             across the full RA-range, n = 'amount'    
# fixed_full_range: copies the entire baseline set n times and moves it by
#             fixed intervals across the full RA-range, n = 'amount'   
#             if this is set, map_min and map_max can additionally be set to 
#             map all events into a new range 
type = per_bin
map_min = 
map_max = 
# type = full_range
# amount: amount of oversampling if the type is full_range
amount = 10
# variable: Analysis dimension for oversampling, 
#           currently only 'reco_ra' is implemented.
variable = reco_ra
# components: Flux components which are non-isotropic in the oversampling 
# variable and need to be evaluated explicitly
components = galactic_box, galactic_fermi
# seed: random seed for reproducibility
seed = 5737836


# --- Detector systematics ---

# The detector and ice systematics to use. 
[IC86_pass2_systematics]
# systematics_path: path to the saved KDE-based per-event rates
#systematics_path = ${IC86_pass2:baseline_dataset}/systematics
systematics_path = /data/user/jhellrung/NNMFit/datasets/ds21002_ds21124_gal/baseline/systematics
# transfer_matrix_mode = hist
# Configured systematics:
systematics = dom_eff, ice_hole, ice_scat, ice_abs

# [IC86_pass2_ice_abs]                  <-- systematic name
# datasets = abs095, basedom, abs105    <-- corresponding datasets
# baseline = basedom                    <-- baseline dataset name
# par_values = (0.95,1.0,1.05)          <-- systematic parameter values
#                                           corresponding to the datasets

[IC86_pass2_ice_abs]
datasets = abs095, basedom, abs105
baseline = basedom
par_values = (0.95,1.0,1.05)

[IC86_pass2_ice_scat]
datasets = scat095, basedom, scat105
baseline = basedom
par_values = (0.95,1.0,1.05)

[IC86_pass2_dom_eff]
datasets = dom090, dom095, basedom, dom105, dom110
baseline = basedom
par_values = (0.9,0.95,1.0,1.05,1.10)

[IC86_pass2_ice_hole]
datasets = holep0minus1, basedom, holep0plus1
baseline = basedom
par_values = (-1.,0.,1.) 

# --- Variable mappings from dataframe ---

[IC86_pass2_var_mapping]
reco_energy = energy_truncated
reco_zenith = zenith_MPEFit
reco_ra = ra_MPEFit
reco_energy_exists = energy_truncated_exists
reco_energy_fit_status = energy_truncated_fit_status
reco_zenith_exists = zenith_MPEFit_exists
reco_zenith_fit_status = zenith_MPEFit_fit_status

[IC86_pass2_var_mapping_mc]
true_energy = MCPrimaryEnergy
true_zenith = MCPrimaryZenith
true_ptype = MCPrimaryType
true_lat = MCPrimaryLat
true_lon = MCPrimaryLon
true_dec = MCPrimaryDec
true_ra = MCPrimaryRA
